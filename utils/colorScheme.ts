import { execAsync } from 'astal';
import { App } from 'astal/gtk4';

/**
 * Defines the structure for color themes, specifically the dark variant.
 */
interface ColorTheme {
  colors: {
    dark: Record<string, string>;
  };
}

/**
 * Generates a color theme based on the wallpaper specified in the global CONFIG.
 * Uses the 'matugen' command-line tool.
 * @returns A Promise resolving to the ColorTheme object or null if generation fails or no wallpaper is set.
 */
export async function generateColorsFromWallpaper(): Promise<ColorTheme | null> {
  if (!globalThis.CONFIG?.wallpaper) {
    console.log('No wallpaper configured, skipping color generation.');
    return null;
  }

  try {
    console.log(`Generating colors from wallpaper: ${globalThis.CONFIG.wallpaper}`);
    // Execute matugen to get colors in JSON format (RGBA)
    const matugenOutput = await execAsync([
      'matugen',
      'image',
      globalThis.CONFIG.wallpaper,
      '-j',
      'rgba',
    ]);
    return JSON.parse(matugenOutput) as ColorTheme;
  } catch (error) {
    console.error('Failed to generate colors using matugen:', error);
    return null;
  }
}

/**
 * Applies the generated color theme to the application using CSS variables.
 * Handles optional transparency for specific elements based on global CONFIG.
 * @param colors - The ColorTheme object generated by `generateColorsFromWallpaper`.
 */
export function applyColorTheme(colors: ColorTheme | null): void {
  if (!colors?.colors?.dark) {
    console.log('No valid color theme provided, skipping application.');
    return;
  }

  const darkColors = colors.colors.dark;
  const useTransparency = globalThis.CONFIG?.transparency === true;

  // Convert color names (e.g., surfaceContainer) to CSS variable names (e.g., --md-sys-color-surface-container)
  // and apply transparency modifications if enabled.
  const cssVars = Object.entries(darkColors)
    .map(([key, value]) => {
      const cssKey = key
        .replace(/([a-z])([A-Z])/g, '$1-$2') // Convert camelCase to kebab-case
        .replace(/_/g, '-') // Replace underscores with hyphens
        .toLowerCase();

      let finalValue = value;

      // Apply transparency modifications if enabled
      if (useTransparency) {
        if (key === 'background') {
          // Make the main background fully transparent
          finalValue = 'transparent';
        } else if (key.includes('container') || key === 'surface') {
          // Apply 80% opacity to container/surface colors
          if (value.startsWith('rgba')) {
            // Modify existing rgba alpha
            finalValue = value.replace(/[\d.]+\s*\)$/, '0.8)');
          } else if (value.startsWith('#')) {
            // Convert hex to rgba with alpha
            const hex = value.substring(1);
            const r = parseInt(hex.substring(0, 2), 16);
            const g = parseInt(hex.substring(2, 4), 16);
            const b = parseInt(hex.substring(4, 6), 16);
            finalValue = `rgba(${r}, ${g}, ${b}, 0.8)`;
          }
        }
      }

      return `--md-sys-color-${cssKey}: ${finalValue};`;
    })
    .join('\n  '); // Indent variables for readability

  // Apply the generated CSS variables to the :root element
  App.apply_css(`:root {\n  ${cssVars}\n}`);
  console.log('Applied theme colors' + (useTransparency ? ' with transparency' : ''));

  // Apply specific transparency override for the Bar window if needed
  if (useTransparency) {
    App.apply_css(`
      window.Bar {
        background-color: transparent;
      }
    `);
    console.log('Applied transparency override to Bar window.');
  }
}
